#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 1
# Grup ile dosya paylaş
# Verilen grup samba paylaşımına eklenir
# 1.0
# samba
# section_name:string,group_name:string
# 3
# Yagiz Kocer
# yagizkocer@gmail.com
# Havelsan
# add_valid_group

import configparser
import json
import sys
import subprocess
import re

SAMBA_CONFIG_PARSER = configparser.ConfigParser()
SAMBA_FILE_PATH = "/etc/samba/smb.conf"
SAMBA_CONFIG_PARSER.read(SAMBA_FILE_PATH)
SECTION_NAME = sys.argv[2]
GROUP_NAME = sys.argv[3]


def get_option_value(section_name, option_name):
    """ Takes two str and returns the option as string, exceptions are NoOptionError and NoSectionError"""

    return (SAMBA_CONFIG_PARSER.get(section_name, option_name))


def add_group(section_name, group_name):
    """ adds group in config file """
    if not SAMBA_CONFIG_PARSER.has_option(section_name, "valid users"):
        add_option(section_name, "valid users", group_name)
    else:
        sed_script = r"sed -r -i '/^\[%s\]/,/^\[/{s/(^valid users = .*)/\1 @%s/}' %s" % (
            section_name, group_name, SAMBA_FILE_PATH)
        subprocess.Popen(sed_script, shell=True)


def group_exist(section_name, group_name):
    """ Checks group in config file, doesnt check group exist in the machine """

    try:
        already_defined_users = [user.strip() for user in get_option_value(
            section_name, "valid users").split(" ")]
        return "@" + group_name in already_defined_users
    except configparser.NoOptionError:
        return False

def group_exist_in_system(group_name):

    bash_command = "getent group | grep -c '^{:s}:'".format(group_name)
    group_exist = subprocess.run(bash_command, shell=True, stdout=subprocess.PIPE).stdout

    return True if group_exist.decode("utf-8") == 1 else False


def add_option(section_name, option_name, value):
    sed_script = r"sed -i '/\[{:s}\]/a {:s} \= @{:s}' {:s}".format(
        section_name, option_name, value, SAMBA_FILE_PATH)
    subprocess.Popen(sed_script, shell=True)


def before():
    if not SAMBA_CONFIG_PARSER.has_section(SECTION_NAME):
        print("Section name : '{:s}' not exist".format(SECTION_NAME))
        exit()
    if group_exist(SECTION_NAME, GROUP_NAME):
        print("Group : '{:s}' already in valid groups".format(GROUP_NAME))
        exit()
    if not group_exist_in_system(GROUP_NAME):
        print("Group : '{:s}' does not exist".format(GROUP_NAME))
        exit()

    print("ok")


def run():
    add_group(SECTION_NAME, GROUP_NAME)


def after():
    if not group_exist(SECTION_NAME, GROUP_NAME):
        print("Group: {:s} can not be added".format(GROUP_NAME))
        exit()
    print("ok")


def automate():
    before_output = make_bash_call('before')
    if before_output != "ok\n":
        print(before_output)
        exit()
    print('before ok')

    make_bash_call('run')

    after_output = make_bash_call('after')
    if after_output != 'ok\n':
        print(after_output)
        exit()
    print('after ok')


def make_bash_call(stage_name):
    bash = ['python3.7', __file__, stage_name, sys.argv[2], sys.argv[3]]
    output = subprocess.Popen(bash, stdout=subprocess.PIPE).stdout
    return output.read().decode('utf-8')


if __name__ == "__main__":
    globals()[sys.argv[1]]()
